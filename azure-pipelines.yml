# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
parameters:
  - name: buildConfiguration
    displayName: Build Configuration
    type: string
    default: Debug
    values:
      - Debug
      - Release
  - name: succeed
    displayName: Succeed or fail
    type: boolean
    default: false

trigger:
- master

pool:
  vmImage: windows-latest

jobs:
- job: Work
  steps:
  - script: echo Hello, world!
    displayName: 'Run a one-line script'

  - script: |
      echo Add other tasks to build, test, and deploy your project.
      echo See https://aka.ms/yaml
    displayName: 'Run a multi-line script'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'restore'
      projects: '**/*.csproj'
      feedsToUse: 'select'

  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '**/*.csproj'
      arguments: '--configuration $(buildConfiguration)' # Update this to match your needs
    
  #- script: exit 1
    #condition: eq(${{ parameters.succeed }}, false)
    #displayName: 'Force failure if succeed is false'
  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(Pipeline.Workspace)'
      artifact: 'TestPipeline'
      publishLocation: 'pipeline'
  - task: ArchiveFiles@2
    inputs:
      rootFolderOrFile: '$(Build.BinariesDirectory)'
      includeRootFolder: true
      archiveType: 'zip'
      archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
      replaceExistingArchive: true

- job: DeployJob
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      artifact: 'TestPipeline'
      path: '$(System.ArtifactsDirectory)'

  - task: IISWebAppDeploymentOnMachineGroup@0
    inputs:
      WebSiteName: 'TestSite'
      Package: '$(System.ArtifactsDirectory)/*.zip'

